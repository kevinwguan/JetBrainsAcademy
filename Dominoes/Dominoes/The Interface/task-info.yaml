type: edu
files:
- name: dominoes/dominoes.py
  visible: true
  text: |
    # Write your code here
    import random
    from collections import namedtuple
    Dominoes = namedtuple('Dominoes', ['stock', 'computer', 'player', 'snake'])


    def main_menu():
        piles = None
        check = 'shuffle'
        while check == 'shuffle':
            game_pieces = create_dominoes()
            piles = deal(game_pieces)
            check = start(piles)
        status = init(piles, check)
        game_state(piles, status)


    def create_dominoes():
        dominoes = []
        pool = [x for x in range(7)]
        master = pool[:]
        for i in pool:
            for j in master:
                dominoes.append([i, j])
            master.pop(0)
        return dominoes


    def deal(game_pieces):
        stock = []
        computer = []
        player = []
        snake = []
        for i in [stock, computer, player, stock]:
            for _ in range(7):
                current = random.choice(game_pieces)
                game_pieces.remove(current)
                i.append(current)
        return Dominoes(stock, computer, player, snake)


    def start(piles):
        for i in range(6, -1, -1):
            if [i, i] in piles[1]:
                return 'computer', [i, i]
            if [i, i] in piles[2]:
                return 'player', [i, i]
        else:
            return 'shuffle'


    def init(piles, check):
        if check[0] == 'computer':
            piles.computer.remove(check[1])
            piles.snake.append(check[1])
            return 'player'
        if check[0] == 'player':
            piles.player.remove(check[1])
            piles.snake.append(check[1])
            return 'computer'


    def game_state(piles, status):
        print(f'Stock pieces: {piles.stock}')
        print(f'Computer pieces {piles.computer}')
        print(f'Player pieces {piles.player}')
        print(f'Domino snake {piles.snake}')
        print(f'Status: {status}')


    main_menu()
  learner_created: false
- name: tests.py
  visible: false
  text: "from typing import List, Any\nfrom hstest import *\nimport ast\n\n\nclass\
    \ TestStage2(StageTest):\n\n    def generate(self) -> List[TestCase]:\n      \
    \  return [\n            TestCase(),\n            TestCase(),\n            TestCase()\n\
    \        ]\n\n    def get_the_stock(self, reply):\n        \"\"\"Get the player's\
    \ stock\"\"\"\n        try:\n            ind = reply.find(\"1:\")\n          \
    \  ind2 = reply.lower().find(\"status\")\n            list_stack = reply[ind:ind2].strip().split('\\\
    n')\n            stock = [i.split(':')[1].strip() for i in list_stack]\n     \
    \       try:\n                stock = [ast.literal_eval(i) for i in stock]\n \
    \           except (ValueError, SyntaxError):\n                raise WrongAnswer(\"\
    An error occurred while processing your output.\\n\"\n                       \
    \                    \"Please make sure that your program's output is formatted\
    \ exactly as described.\")\n            return stock\n        except Exception:\n\
    \            raise WrongAnswer(\"Please, output all pieces in the format: \\\"\
    N:[N1, N2]\\\"\\n\"\t\n                              \"Don't forget the colon\
    \ character as a separator.\")\n\n    def check_the_stock(self, reply):\n    \
    \    \"\"\"Check that the pieces in the player stock are unique\"\"\"\n\n    \
    \    uniq = self.get_the_stock(reply)\n        len1 = len(uniq)\n        try:\n\
    \            uniq = set([tuple(i) for i in uniq])\n        except TypeError:\n\
    \            raise WrongAnswer(\"An error occurred while tests were processing\
    \ your output.\\n\"\n                              \"Make sure you output pieces\
    \ in the required format.\")\n        len2 = len(uniq)\n        if len1 != len2:\n\
    \            return False\n        return True\n\n    def check_the_snake(self,\
    \ reply, ds):\n        \"\"\"Check that the domino snake is really the maximum\"\
    \"\"\n\n        stock = self.get_the_stock(reply)\n        stock = [i for i in\
    \ stock if i[0] == i[1]]\n        if len(stock) > 0:\n            if ds and type(ds[0])\
    \ != int:\n                raise WrongAnswer(\"The domino snake is supposed to\
    \ be a list containing two integers.\\n\"\n                                  \"\
    Please, make sure you output the domino snake in the required format.\")\n   \
    \         if ds < sorted(stock, reverse=True)[0]:\n                return False\n\
    \        return True\n\n    def check_the_length(self, reply, cs):\n        stock\
    \ = self.get_the_stock(reply)\n        opt = len(stock) == 7 and cs == 6\n   \
    \     opt2 = len(stock) == 6 and cs == 7\n        if not (opt or opt2):\n    \
    \        return False\n        return True\n\n    def check_the_status(self, reply,\
    \ cs):\n        \"\"\"Check if the status is right\"\"\"\n\n        opt = cs ==\
    \ 7 and \"computer is\" in reply.lower()\n        opt2 = cs == 6 and \"your turn\"\
    \ in reply\n        if not (opt or opt2):\n            return False\n        return\
    \ True\n\n    def check(self, reply: list, attach: Any) -> CheckResult:\n    \
    \    if not self.check_the_stock(reply):\n            return CheckResult.wrong(\"\
    Your pieces are not unique\")\n        replyk = [i for i in reply.split('\\n')\
    \ if i]\n        if replyk[0] != \"=\" * 70:\n            return CheckResult.wrong(\"\
    The design is not right\")\n        try:\n            stock_size = int(replyk[1].split()[-1])\n\
    \        except ValueError:\n            raise WrongAnswer(\"The stock size doesn't\
    \ seem to be printed in the correct format. \\n\"\n                          \
    \    \"Please, output it in the format: \\\"Stock size: N\\\",\\n\"\n        \
    \                      \"where N is a number.\")\n        if stock_size != 14:\n\
    \            return CheckResult.wrong(\"The stock is not right\")\n        try:\n\
    \            domino_snake = ast.literal_eval(replyk[3])\n        except (IndentationError,\
    \ SyntaxError, ValueError):\n            raise WrongAnswer(\"Domino pieces don't\
    \ seem to be printed in the correct format.\")\n\n        if not self.check_the_snake(reply,\
    \ domino_snake):\n            return CheckResult.wrong(\"The domino snake should\
    \ be the maximum\")\n        try:\n            cs = int(replyk[2].split()[-1])\n\
    \        except ValueError:\n            raise WrongAnswer(\"Computer pieces don't\
    \ seem to be printed in the correct format. \\n\"\n                          \
    \    \"Please, output them in the format: \\\"Computer pieces: N\\\",\\n\"\n \
    \                             \"where N is a number.\")\n        if not 6 <= cs\
    \ <= 7:\n            return CheckResult.wrong(\"The computer pieces are not right\"\
    )\n        if not self.check_the_length(reply, cs):\n            return CheckResult.wrong(\"\
    Something is not right about the pieces played\")\n        if not self.check_the_status(reply,\
    \ cs):\n            return CheckResult.wrong(\"The status of the game is wrong\"\
    )\n        return CheckResult.correct()\n\n\nif __name__ == '__main__':\n    TestStage2('dominoes.dominoes').run_tests()\n"
  learner_created: false
feedback_link: https://hyperskill.org/projects/146/stages/787/implement#comment
status: Solved
record: 1
